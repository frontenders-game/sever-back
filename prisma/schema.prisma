generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum ERole {
  CLIENT
  MANAGER
  COURIER
  ADMIN
}

enum EGender {
  MALE
  FEMALE
}

enum EConfirmationMethod {
  EMAIL
  SMS
}

model JWToken {
  id           String   @id @unique @default(uuid())
  refreshToken String
  accessToken  String
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  createdAt    DateTime @default(now())

  @@map("tokens")
}

model Confirmation {
  id        String              @id @default(uuid())
  code      String
  method    EConfirmationMethod @default(SMS)
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id])
  userId    String              @unique

  @@map("confirmations")
}

model User {
  id               String        @id @default(uuid())
  firstName        String        @db.VarChar(50)
  lastName         String        @db.VarChar(50)
  email            String?       @unique @db.VarChar(100)
  gender           EGender       @default(MALE)
  region           String
  town             String
  password         String
  phoneNumber      String?       @unique @db.VarChar(15)
  profileAvatar    String?
  role             ERole         @default(CLIENT)
  dateOfBirth      DateTime      @db.Date
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  confirmation     Confirmation?
  bonusPoints      Int           @default(0)
  cardNumber       Int?          @unique
  tokens           JWToken[]
  reviews          Review[]
  orders           Order[]
  favoriteProducts Favorites[]
  cart             CartItem[]

  @@map("users")
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique

  @@index([productId, userId])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?  @db.VarChar(1024)
  rating    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@map("reviews")
}

model Order {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  useBonusPoints    Int
  rewardBonusPoints Int
  product           Product  @relation(fields: [productId], references: [id])
  productId         String
  deliveryTime      DateTime
  user              User     @relation(fields: [userId], references: [id])
  userId            String

  @@map("orders")
}

model Favorites {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@id([productId, userId])
}

model Product {
  id                 String        @id @unique @default(uuid())
  name               String        @unique @db.VarChar(255)
  slug               String        @unique @db.VarChar(255)
  images             ProducImage[]
  unitsOfMeasurement String        @default("шт.")
  step               Decimal       @default(1.0)
  isNew              Boolean       @default(true)
  ingredients        String?
  stockCount         Int
  priceRegular       Decimal
  priceWithCard      Decimal
  promo              Promo?
  information        Information[]
  favoredByUsers     Favorites[]
  cartItem           CartItem[]
  orders             Order[]
  reviewsCount       Int           @default(0)
  averageRating      Int           @default(0)
  reviews            Review[]
  subcategory        Subcategory   @relation(fields: [subcategoryId], references: [id])
  subcategoryId      String
  category           Category      @relation(fields: [categoryId], references: [id])
  categoryId         String

  @@index([subcategoryId, categoryId])
  @@map("products")
}

model ProducImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  full      String?
  small     String?
  thumb     String?
  order     Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@map("product_images")
}

model Promo {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  discountedPriceRegular  Decimal
  discountedPriceWithCard Decimal
  discountPercent         Decimal
  isActive                Boolean   @default(true)
  expiresAt               DateTime?
  product                 Product   @relation(fields: [productId], references: [id])
  productId               String    @unique

  @@map("promos")
}

model Information {
  id                 String  @id @default(uuid())
  value              String
  unitsOfMeasurement String?
  name               String
  order              Int
  isNutrient         Boolean
  nutrientName       String?
  product            Product @relation(fields: [productId], references: [id])
  productId          String

  @@map("information")
}

model Category {
  id                 String        @id @unique @default(uuid())
  name               String        @unique @db.VarChar(255)
  slug               String        @unique @db.VarChar(255)
  image              String?
  description        String?
  subcategoriesCount Int           @default(0)
  subcategories      Subcategory[]
  products           Product[]
  productsCount      Int           @default(0)

  @@map("categories")
}

model Subcategory {
  id            String    @id @unique @default(uuid())
  name          String    @unique @db.VarChar(255)
  slug          String    @unique @db.VarChar(255)
  image         String?
  description   String?
  productsCount Int       @default(0)
  products      Product[]
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String

  @@map("subcategories")
}
